<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NAV1Rain</title>
  
  <subtitle>若矢失之，则失远之。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nav1rain.github.io/"/>
  <updated>2019-01-23T16:45:47.042Z</updated>
  <id>http://nav1rain.github.io/</id>
  
  <author>
    <name>宋子祺</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小希的迷宫 - HDU 1272</title>
    <link href="http://nav1rain.github.io/2019/01/12/Cyclic%20Nacklace%20-%20HDU%203746/"/>
    <id>http://nav1rain.github.io/2019/01/12/Cyclic Nacklace - HDU 3746/</id>
    <published>2019-01-12T06:59:31.000Z</published>
    <updated>2019-01-23T16:45:47.042Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cyclic-Nacklace-HDU-3746"><a href="#Cyclic-Nacklace-HDU-3746" class="headerlink" title="Cyclic Nacklace - HDU 3746"></a>Cyclic Nacklace - HDU 3746</h1><p>原题链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3746" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3746</a></p><p>!<-- more="" --=""></--></p><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)Total Submission(s): 16790    Accepted Submission(s): 6928</strong></p><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>CC always becomes very depressed at the end of this month, he has checked his credit card yesterday, without any surprise, there are only 99.9 yuan left. he is too distressed and thinking about how to tide over the last days. Being inspired by the entrepreneurial spirit of “HDU CakeMan”, he wants to sell some little things to make money. Of course, this is not an easy task.</p><p>As Christmas is around the corner, Boys are busy in choosing christmas presents to send to their girlfriends. It is believed that chain bracelet is a good choice. However, Things are not always so simple, as is known to everyone, girl’s fond of the colorful decoration to make bracelet appears vivid and lively, meanwhile they want to display their mature side as college students. after CC understands the girls demands, he intends to sell the chain bracelet called CharmBracelet. The CharmBracelet is made up with colorful pearls to show girls’ lively, and the most important thing is that it must be connected by a cyclic chain which means the color of pearls are cyclic connected from the left to right. And the cyclic count must be more than one. If you connect the leftmost pearl and the rightmost pearl of such chain, you can make a CharmBracelet. Just like the pictrue below, this CharmBracelet’s cycle is 9 and its cyclic count is 2:<br><img src="http://acm.hdu.edu.cn/data/images/C319-1003-1.jpg" alt="img"><br>Now CC has brought in some ordinary bracelet chains, he wants to buy minimum number of pearls to make CharmBracelets so that he can save more money. but when remaking the bracelet, he can only add color pearls to the left end and right end of the chain, that is to say, adding to the middle is forbidden.<br>CC is satisfied with his ideas and ask you for help.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input is a single integer T ( 0 &lt; T &lt;= 100 ) which means the number of test cases.<br>Each test case contains only one line describe the original ordinary chain to be remade. Each character in the string stands for one pearl and there are 26 kinds of pearls being described by ‘a’ ~’z’ characters. The length of the string Len: ( 3 &lt;= Len &lt;= 100000 ).</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each case, you are required to output the minimum count of pearls added to make a CharmBracelet.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">aaa</span><br><span class="line">abca</span><br><span class="line">abcde</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>​    输入T，接下来有T组样例。每组样例有个字符串，题目让我们判断需要多少个字符使字符串变成多个子字符串组成的字符串。这种字符串可以称作最小循环节。</p><h1 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h1><p>​    可以利用KMP的next数组的性质，通过最后一个字符的数也就是next[len]知道它最后能匹配到的位置。所以，最小循环节的长度是 len - next[len]。如果没有最小循环节，也就是next[len] = 0，此时输入len即可。如果不为0，则要判断len时候能被len-next[len]整除。若能则输出0，反之则输出len-next[len] - len%(len-next[len])。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">100010</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_pre</span><span class="params">(<span class="keyword">char</span> x[], <span class="keyword">int</span> m, <span class="keyword">int</span> next[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j;</span><br><span class="line">  j = next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; x[i] != x[j]) j = next[j];</span><br><span class="line">    next[++i] = ++j;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> next[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[SIZE];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    kmp_pre(str, len, next);</span><br><span class="line">    <span class="keyword">if</span> (next[len] == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> jie = len - next[len];</span><br><span class="line">      <span class="keyword">if</span> (len % jie == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, jie - len % jie);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cyclic-Nacklace-HDU-3746&quot;&gt;&lt;a href=&quot;#Cyclic-Nacklace-HDU-3746&quot; class=&quot;headerlink&quot; title=&quot;Cyclic Nacklace - HDU 3746&quot;&gt;&lt;/a&gt;Cyclic Nackl
      
    
    </summary>
    
      <category term="HDU" scheme="http://nav1rain.github.io/categories/HDU/"/>
    
      <category term="KMP" scheme="http://nav1rain.github.io/categories/HDU/KMP/"/>
    
    
      <category term="HDU" scheme="http://nav1rain.github.io/tags/HDU/"/>
    
      <category term="KMP" scheme="http://nav1rain.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>小希的迷宫 - HDU 1272</title>
    <link href="http://nav1rain.github.io/2019/01/12/%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB%20-%20HDU%201272/"/>
    <id>http://nav1rain.github.io/2019/01/12/小希的迷宫 - HDU 1272/</id>
    <published>2019-01-12T06:59:31.000Z</published>
    <updated>2019-01-23T13:15:54.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小希的迷宫-HDU-1272"><a href="#小希的迷宫-HDU-1272" class="headerlink" title="小希的迷宫 - HDU 1272"></a>小希的迷宫 - HDU 1272</h1><p>原题链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1272" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1272</a></p><a id="more"></a><p><strong>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)Total Submission(s): 68184    Accepted Submission(s): 21379</strong></p><h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>上次Gardon的迷宫城堡小希玩了很久（见Problem B），现在她也想设计一个迷宫让Gardon来走。但是她设计迷宫的思路不一样，首先她认为所有的通道都应该是双向连通的，就是说如果有一个通道连通了房间A和B，那么既可以通过它从房间A走到房间B，也可以通过它从房间B走到房间A，为了提高难度，小希希望任意两个房间有且仅有一条路径可以相通（除非走了回头路）。小希现在把她的设计图给你，让你帮忙判断她的设计图是否符合她的设计思路。比如下面的例子，前两个是符合条件的，但是最后一个却有两种方法从5到达8。<br><img src="http://acm.hdu.edu.cn/data/images/C20-1007-1.jpg" alt="img"></p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入包含多组数据，每组数据是一个以0 0结尾的整数对列表，表示了一条通道连接的两个房间的编号。房间的编号至少为1，且不超过100000。每两组数据之间有一个空行。<br>整个文件以两个-1结尾。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于输入的每一组数据，输出仅包括一行。如果该迷宫符合小希的思路，那么输出”Yes”，否则输出”No”。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 8  5 3  5 2  6 4</span><br><span class="line">5 6  0 0</span><br><span class="line"></span><br><span class="line">8 1  7 3  6 2  8 9  7 5</span><br><span class="line">7 4  7 8  7 6  0 0</span><br><span class="line"></span><br><span class="line">3 8  6 8  6 4</span><br><span class="line">5 3  5 6  5 2  0 0</span><br><span class="line"></span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>​    每一条边都是强连通（也就是双向连通）的。要求你判断图中的每个点是否都是对其他的点只有一条路径达到，而不是多条。</p><h1 id="解题方法："><a href="#解题方法：" class="headerlink" title="解题方法："></a>解题方法：</h1><p>​    采用的是简单并查集的方法。如果输入的两个点已经在一个集合中了，就要输出No。因为已经有一条路了。</p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">100006</span>;</span><br><span class="line"><span class="keyword">int</span> node[SIZE];</span><br><span class="line"><span class="keyword">bool</span> ok[SIZE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= SIZE; i++) &#123;</span><br><span class="line">node[i] = i, ok[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x != node[x]) node[x] = Find(node[x]);</span><br><span class="line"><span class="keyword">return</span> node[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unit</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = Find(x);</span><br><span class="line">y = Find(y);</span><br><span class="line">node[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">-1</span> &amp;&amp; b == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">int</span> FLAG = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(Find(a) == Find(b))</span><br><span class="line">                FLAG = <span class="number">1</span>;</span><br><span class="line">            Unit(a,b);</span><br><span class="line">            ok[a] = <span class="number">1</span>, ok[b] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(FLAG == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(ok[i] &amp;&amp; node[i] == i)</span><br><span class="line">                    sum++;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小希的迷宫-HDU-1272&quot;&gt;&lt;a href=&quot;#小希的迷宫-HDU-1272&quot; class=&quot;headerlink&quot; title=&quot;小希的迷宫 - HDU 1272&quot;&gt;&lt;/a&gt;小希的迷宫 - HDU 1272&lt;/h1&gt;&lt;p&gt;原题链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=1272&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=1272&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDU" scheme="http://nav1rain.github.io/categories/HDU/"/>
    
      <category term="并查集" scheme="http://nav1rain.github.io/categories/HDU/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="简单并查集" scheme="http://nav1rain.github.io/categories/HDU/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E7%AE%80%E5%8D%95%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="HDU" scheme="http://nav1rain.github.io/tags/HDU/"/>
    
      <category term="并查集" scheme="http://nav1rain.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="简单并查集" scheme="http://nav1rain.github.io/tags/%E7%AE%80%E5%8D%95%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>hello,world</title>
    <link href="http://nav1rain.github.io/2018/10/06/hello-world/"/>
    <id>http://nav1rain.github.io/2018/10/06/hello-world/</id>
    <published>2018-10-06T02:42:47.000Z</published>
    <updated>2019-01-22T23:54:35.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="若矢失之，则矢远之"><a href="#若矢失之，则矢远之" class="headerlink" title="若矢失之，则矢远之"></a>若矢失之，则矢远之</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;若矢失之，则矢远之&quot;&gt;&lt;a href=&quot;#若矢失之，则矢远之&quot; class=&quot;headerlink&quot; title=&quot;若矢失之，则矢远之&quot;&gt;&lt;/a&gt;若矢失之，则矢远之&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
