<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NAV1Rain</title>
  
  <subtitle>若矢失之，则失远之。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nav1rain.github.io/"/>
  <updated>2019-01-23T01:34:20.786Z</updated>
  <id>http://nav1rain.github.io/</id>
  
  <author>
    <name>宋子祺</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小希的迷宫 - HDU 1272</title>
    <link href="http://nav1rain.github.io/2019/01/12/%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB-HDU%201272/"/>
    <id>http://nav1rain.github.io/2019/01/12/小希的迷宫-HDU 1272/</id>
    <published>2019-01-12T06:59:31.000Z</published>
    <updated>2019-01-23T01:34:20.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小希的迷宫-HDU-1272"><a href="#小希的迷宫-HDU-1272" class="headerlink" title="小希的迷宫 - HDU 1272"></a>小希的迷宫 - HDU 1272</h1><p>原题链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1272" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=1272</a></p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h2><pre><code>每一条边都是强连通（也就是双向连通）的。要求你判断图中的每个点是否都是对其他的点只有一条路径达到，而不是多条。</code></pre><h2 id="解题方法："><a href="#解题方法：" class="headerlink" title="解题方法："></a>解题方法：</h2><pre><code>采用的是简单并查集的方法。如果输入的两个点已经在一个集合中了，就要输出No。因为已经有一条路了。</code></pre><h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">100006</span>;</span><br><span class="line"><span class="keyword">int</span> node[SIZE];</span><br><span class="line"><span class="keyword">bool</span> ok[SIZE];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= SIZE; i++) &#123;</span><br><span class="line">node[i] = i, ok[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x != node[x]) node[x] = Find(node[x]);</span><br><span class="line"><span class="keyword">return</span> node[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unit</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = Find(x);</span><br><span class="line">y = Find(y);</span><br><span class="line">node[y] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">-1</span> &amp;&amp; b == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        Init();</span><br><span class="line">        <span class="keyword">int</span> FLAG = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="number">0</span> &amp;&amp; b == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(Find(a) == Find(b))</span><br><span class="line">                FLAG = <span class="number">1</span>;</span><br><span class="line">            Unit(a,b);</span><br><span class="line">            ok[a] = <span class="number">1</span>, ok[b] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(FLAG == <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; i++)</span><br><span class="line">                <span class="keyword">if</span>(ok[i] &amp;&amp; node[i] == i)</span><br><span class="line">                    sum++;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小希的迷宫-HDU-1272&quot;&gt;&lt;a href=&quot;#小希的迷宫-HDU-1272&quot; class=&quot;headerlink&quot; title=&quot;小希的迷宫 - HDU 1272&quot;&gt;&lt;/a&gt;小希的迷宫 - HDU 1272&lt;/h1&gt;&lt;p&gt;原题链接：&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="HDU" scheme="http://nav1rain.github.io/categories/HDU/"/>
    
      <category term="并查集" scheme="http://nav1rain.github.io/categories/HDU/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="简单并查集" scheme="http://nav1rain.github.io/categories/HDU/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E7%AE%80%E5%8D%95%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="HDU" scheme="http://nav1rain.github.io/tags/HDU/"/>
    
      <category term="并查集" scheme="http://nav1rain.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="简单并查集" scheme="http://nav1rain.github.io/tags/%E7%AE%80%E5%8D%95%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>hello,world</title>
    <link href="http://nav1rain.github.io/2018/10/06/hello-world/"/>
    <id>http://nav1rain.github.io/2018/10/06/hello-world/</id>
    <published>2018-10-06T02:42:47.000Z</published>
    <updated>2019-01-22T23:54:35.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="若矢失之，则矢远之"><a href="#若矢失之，则矢远之" class="headerlink" title="若矢失之，则矢远之"></a>若矢失之，则矢远之</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;若矢失之，则矢远之&quot;&gt;&lt;a href=&quot;#若矢失之，则矢远之&quot; class=&quot;headerlink&quot; title=&quot;若矢失之，则矢远之&quot;&gt;&lt;/a&gt;若矢失之，则矢远之&lt;/h1&gt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
